CHIP CLA16 {
	IN a[16], b[16];
	OUT sum[16], carry;

	PARTS:
	//define zero
	And(a = a[0], b = nota, out = zero);
	Not(in = a[0], out = nota);
	//define one
	Or(a = a[0], b = nota, out = one);

	//Propagator terms
	Propagator(a = a[0], b = b[0], out = p0);
	Propagator(a = a[1], b = b[1], out = p1);
	Propagator(a = a[2], b = b[2], out = p2);
	Propagator(a = a[3], b = b[3], out = p3);
	Propagator(a = a[4], b = b[4], out = p4);
	Propagator(a = a[5], b = b[5], out = p5);
	Propagator(a = a[6], b = b[6], out = p6);
	Propagator(a = a[7], b = b[7], out = p7);
	Propagator(a = a[8], b = b[8], out = p8);
	Propagator(a = a[9], b = b[9], out = p9);
	Propagator(a = a[10], b = b[10], out = p10);
	Propagator(a = a[11], b = b[11], out = p11);
	Propagator(a = a[12], b = b[12], out = p12);
	Propagator(a = a[13], b = b[13], out = p13);
	Propagator(a = a[14], b = b[14], out = p14);
	Propagator(a = a[15], b = b[15], out = p15);

	//generator terms
	And(a = a[0], b = b[0], out = g0);
	And(a = a[1], b = b[1], out = g1);
	And(a = a[2], b = b[2], out = g2);
	And(a = a[3], b = b[3], out = g3);
	And(a = a[4], b = b[4], out = g4);
	And(a = a[5], b = b[5], out = g5);
	And(a = a[6], b = b[6], out = g6);
	And(a = a[7], b = b[7], out = g7);
	And(a = a[8], b = b[8], out = g8);
	And(a = a[9], b = b[9], out = g9);
	And(a = a[10], b = b[10], out = g10);
	And(a = a[11], b = b[11], out = g11);
	And(a = a[12], b = b[12], out = g12);
	And(a = a[13], b = b[13], out = g13);
	And(a = a[14], b = b[14], out = g14);
	And(a = a[15], b = b[15], out = g15);

	
	//carry terms
	//  c i+1 = G i + P i G i−1 + P i P i−1 G i−2 + · · · + P i P i−1 · · · P 1 G 0 + P i P i−1 · · · P 0 c 0
	//c0 = 0
	Xor(a = g0, b = g0, out = c0 );
	
	//c1 = c0p0+g0
	Or (a = g0, b = c0p0, 	out = c1);
	And(a = c0, b = p0, 	out = c0p0 );

	//c2 = c1p1+g1 = p1p0c0+ p1g0 + g1
	And(a = p1, 	b = g0, 	out = p1g0);
	And(a = c0, 	b = p0, 	out = p0c0);

	And(a = p0c0, 	b = p1, 	out = p1p0c0);
	
	Or (a = p1p0c0, b = p1g0, 	out = c2xt1 );
	Or (a = c2xt1, 	b = g1, 	out = c2);

	//c3 = c2p2+g2 = p2p1p0c0 + p2p1g0 + p2g1+ g2
	And4way( a = p2, b = p1, c = p0, d = c0, out = p2p1p0c0);
	And4way( a = p2, b = p1, c = g0, d = one, out = p2p1g0);
	And(a = p2, b = g1, out = p2g1);
	Or4way(a = p2p1p0c0, b = p2p1g0, c = p2g1, d = g2, out = c3);

	
	//c4 = c3p3+g3 = p3p2p1p0c0 + p3p2p1g0 + p3p2g1+ p3g2 + g3
	And(a = p2p1p0c0, b = p3, out = p3p2p1p0c0);
	And(a = p3, b = p2p1g0, out = p3p2p1g0);
	And(a = p3, b = p2g1, out = p3p2g1);
	And(a = p3, b = g2, out = p3g2);
	Or4way(a = p3p2p1p0c0, b = p3p2p1g0, c = p3p2g1, d = p3g2, out = c4xt1);
	Or(a = c4xt1, b = g3, out = c4);
	

	//c5 = g4+ p4c4 
	And(a = p4, b = c4, out = p4c4);
	Or(a = g4, b = p4c4, out = c5);

	//c6 = p5p4c4+ p5g4 + g5
	And(a = p5, b = g4, out = p5g4);
	And(a = p4c4, b = p5, out = p5p4c4);
	Or(a = p5p4c4, b = p5g4, out = c6xt1);
	Or(a = c6xt1, b = g5, out = c6);
	
	//c7 = p2p1p0c0 + p2p1g0 + p2g1+ g2

	And4way( a = p6, b = p5, c = p4, d = c4, out = p6p5p4c4);
	And4way( a = p6, b = p5, c = g4, d = one, out = p6p5g4);
	And(a = p6, b = g5, out = p6g5);
	Or4way(a = p6p5p4c4, b = p6p5g4, c = p6g5, d = g6, out = c7);

	//c8 = c3p3+g3 = p3p2p1p0c0 + p3p2p1g0 + p3p2g1+ p3g2 + g3
	And(a = p6p5p4c4, b = p7, out = p7p6p5p4c4);
	And(a = p7, b = p6p5g4, out = p7p6p5g4);
	And(a = p7, b = p6g5, out = p7p6g5);
	And(a = p7, b = g6, out = p7g6);
	Or4way(a = p7p6p5p4c4, b = p7p6p5g4, c = p7p6g5, d = p7g6, out = c8xt1);
	Or(a = c8xt1, b = g7, out = c8);

	//c9 = g8+ p8c8 
	And(a = p8, b = c8, out = p8c8);
	Or(a = g8, b = p8c8, out = c9);

	//c10 = p9p8c8+ p9g8 + g9
	And(a = p9, b = g8, out = p9g8);
	And(a = p8c8, b = p9, out = p9p8c8);
	Or(a = p9p8c8, b = p9g8, out = c10xt1);
	Or(a = c10xt1, b = g9, out = c10);
	

	//c11

	And4way( a = p10, b = p9, c = p8, d = c8, out = p10p9p8c8);
	And4way( a = p10, b = p9, c = g8, d = one, out = p10p9g8);
	And(a = p10, b = g9, out = p10g9);
	Or4way(a = p10p9p8c8, b = p10p9g8, c = p10g9, d = g10, out = c11);

	//c12 = p11p2p1p0c0 + p11p2p1g0 + p11p2g1+ p11g2 + g11
	And(a = p10p9p8c8, b = p11, out = p11p10p9p8c8);
	And(a = p11, b = p10p9g8, out = p11p10p9g8);
	And(a = p11, b = p10g9, out = p11p10g9);
	And(a = p11, b = g10, out = p11g10);
	Or4way(a = p11p10p9p8c8, b = p11p10p9g8, c = p11p10g9, d = p11g10, out = c12xt1);
	Or(a = c8xt1, b = g11, out = c12);



	//c13 = g4+ p4c4 
	And(a = p12, b = c12, out = p12c12);
	Or(a = g12, b = p12c12, out = c13);

	//c14 = p13p4c4+ p13g4 + g13
	And(a = p13, b = g4, out = p13g4);
	And(a = p4c4, b = p13, out = p13p4c4);
	Or(a = p13p4c4, b = p13g4, out = c14xt1);
	Or(a = c14xt1, b = g13, out = c14);
	
	//c15 = p2p1p0c0 + p2p1g0 + p2g1+ g2

	And4way( a = p14, b = p13, c = p4, d = c4, out = p14p13p4c4);
	And4way( a = p14, b = p13, c = g4, d = one, out = p14p13g4);
	And(a = p14, b = g13, out = p14g13);
	Or4way(a = p14p13p4c4, b = p14p13g4, c = p14g13, d = g14, out = c15);

	//c16 = c3p3+g3 = p3p2p1p0c0 + p3p2p1g0 + p3p2g1+ p3g2 + g3
	And(a = p14p13p4c4, b = p15, out = p15p14p13p4c4);
	And(a = p15, b = p14p13g4, out = p15p14p13g4);
	And(a = p15, b = p14g13, out = p15p14g13);
	And(a = p15, b = g14, out = p15g14);
	Or4way(a = p15p14p13p4c4, b = p15p14p13g4, c = p15p14g13, d = p15g14, out = c16xt1);
	Or(a = c16xt1, b = g15, out = c16);




}